/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusStartManager -p dbustartmanager com.deepin.StartManager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSTARTMANAGER_H_1457934737
#define DBUSTARTMANAGER_H_1457934737

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.desktopspec.ApplicationManager
 */
class DBusStartManager: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;

        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != staticInterfaceName())
            return;

        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        auto keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "org.desktopspec.ApplicationManager"; }

public:
    explicit DBusStartManager(QObject *parent = 0);

    ~DBusStartManager();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> AddAutostart(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AddAutostart"), argumentList);
    }

    inline QDBusPendingReply<QStringList> AutostartList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("AutostartList"), argumentList);
    }

    inline QDBusPendingReply<bool> IsAutostart(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsAutostart"), argumentList);
    }

    inline QDBusPendingReply<bool> RemoveAutostart(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("RemoveAutostart"), argumentList);
    }

    inline QDBusPendingReply<> Launch(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Launch"), argumentList);
    }

    inline QDBusPendingReply<> LaunchApp(const QString &desktop, uint timestamp, const QStringList &file)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop);
        argumentList << QVariant::fromValue(timestamp);
        argumentList << QVariant::fromValue(file);
        return asyncCallWithArgumentList(QStringLiteral("LaunchApp"), argumentList);
    }

    inline QDBusPendingReply<> LaunchAppAction(const QString &desktop, const QString &action, const uint &timestamp)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(desktop);
        argumentList << QVariant::fromValue(action);
        argumentList << QVariant::fromValue(timestamp);
        return asyncCallWithArgumentList(QStringLiteral("LaunchApp"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void AutostartChanged(const QString &in0, const QString &in1);
};

namespace org {
  namespace deepin {
    typedef ::DBusStartManager StartManager;
  }
}
#endif
